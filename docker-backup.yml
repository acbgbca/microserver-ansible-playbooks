---
# file: docker.yml
- hosts: docker
  remote_user: devops
  become: true
  # connection: local

  tasks:
  - name: Clean up plex history
    shell: 'find "/ctr_cfg/plex/config/Library/Application Support/Plex Media Server/Cache/PhotoTranscoder" -type f -mtime +5 -delete'
  - name: Get current date
    shell: 'date "+%Y%m%d"'
    register: currdate
    check_mode: no
    tags:
    - always
  - set_fact:
      currdate={{ currdate.stdout }}
    tags:
    - always
  - name: Create temporary archive directory
    file:
      path: "/tmp/backup/{{ currdate }}"
      state: directory
      mode: 0775
      owner: ctrdata
      group: ctrdata
  - name: Get all dirs
    find:
      paths: /ctr_cfg
      file_type: directory
    register: dockerdirs
  - name: Backup and upgrade
    include_tasks: includes/docker_backup_upgrade.yml
    with_items: "{{ dockerdirs.files }}"
    vars:
      backup_dir: "/tmp/backup/{{ currdate }}"
  # - name: Backup each directory
  #   community.general.archive:
  #     path: "{{ item.path }}"
  #     dest: /tmp/backup/{{ currdate }}/{{ item.path | basename }}.tgz
  #     owner: ctrdata
  #     group: ctrdata
  #     format: gz
  #   when: no
  - name: Copy to backup NFS
    command: 'su -c "cp -r /tmp/backup/{{ currdate }} /mnt/backup/" ctrdata'
    when: not ansible_check_mode
  - name: Clean up backups
    file:
      path: "/tmp/backup/{{ currdate }}"
      state: absent
    tags:
    - cleanup
  - name: Find backups to remove (keep last 5)
    shell: 'ls -1tr /mnt/backup | head -n -5'
    check_mode: no
    register: oldBackups
    tags:
    - cleanup
  - name: Remove old backups
    file:
      path: "/mnt/backup/{{ item }}"
      state: absent
    with_items: "{{ oldBackups.stdout_lines }}"
    when: oldBackups is defined
    tags:
    - cleanup
  - name: Notify Monitoring task complete
    uri:
      url: "https://hc-ping.com/{{ ping_id }}"
      timeout: 10
    register: pingresult
    until: "pingresult is not failed"
    retries: 5
    delay: 30

