---
- hosts: microserver
  become: true

  pre_tasks:
    - name: Update apt-cache if needed
      apt:
        update_cache: yes
        cache_valid_time: 3600
    - name: Add docker data group
      group:
        name: "{{ data_user }}"
        state: present
        gid: "{{ data_id }}"
    - name: Add docker data user
      user:
        name: "{{ data_user }}"
        state: present
        uid: "{{ data_id }}"
        group: "{{ data_user }}"
        append: yes
        groups:
          - "{{ data_user }}"
    - name: Install base dependencies
      apt:
        name:
          - cron
          - jq # For cloudflare script
        state: present
  
  roles:
  - role: base_server
    tags: baseserver
  - role: docker
    tags: docker
  - role: docker_server
    tags: docker_server
  - role: cloud_sync
    tags: cloudsync
  - role: samba_server
    tags: samba
  
  tasks:
  - name: Set timezone
    community.general.timezone:
      name: Australia/Melbourne
    notify: Restart cron
    tags: timezone
  - name: Setup script directory
    ansible.builtin.file:
      path: "/home/{{ cloud_sources.rclone_user }}/bin"
      state: directory
      owner: "{{  cloud_sources.rclone_user }}"
      group: "{{  cloud_sources.rclone_user }}"
      mode: 0775
    tags: paperless,calibre,cron
  - name: Generate Scripts
    ansible.builtin.template:
      src: templates/{{  item.filename }}.j2
      dest: "/home/{{ cloud_sources.rclone_user }}/bin/{{ item.filename }}"
      owner: "{{  cloud_sources.rclone_user }}"
      group: "{{  cloud_sources.rclone_user }}"
      mode : 0775
    with_items: "{{ cron_jobs }}"
    tags: cron
  - name: Setup cron jobs
    ansible.builtin.cron:
      name: "{{ item.name }}"
      minute: "{{ item.cronMinute | default('*') }}"
      hour: "{{ item.cronHour | default('*') }}"
      weekday: "{{ item.cronDay | default('*') }}"
      job: "/home/{{ cloud_sources.rclone_user }}/bin/{{ item.filename }} > {{ item.logfile }} 2>&1"
      user: "{{  cloud_sources.rclone_user }}"
    with_items: "{{ cron_jobs }}"
    tags: cron
  - name: Setup log files
    ansible.builtin.file:
      path: "{{ item.logfile }}"
      state: touch
      owner: "{{  cloud_sources.rclone_user }}"
      group: "{{  cloud_sources.rclone_user }}"
      modification_time: preserve
      access_time: preserve
      mode: 0664
    with_items: "{{ cron_jobs }}"
    tags: cron
  - name: Calibre Import Script
    ansible.builtin.template:
      src: templates/calibre_import.sh.j2
      dest: "/home/{{ cloud_sources.rclone_user }}/bin/calibre_import.sh"
      owner: "{{  cloud_sources.rclone_user }}"
      group: "{{  cloud_sources.rclone_user }}"
      mode : 0775
    tags: calibre
  - name: Calibre log files
    ansible.builtin.file:
      path: "/var/log/calibre"
      state: touch
      owner: "{{  cloud_sources.rclone_user }}"
      group: "{{  cloud_sources.rclone_user }}"
      modification_time: preserve
      access_time: preserve
      mode: 0664
    tags: calibre
  - name: Calibre Import Cron
    ansible.builtin.cron:
      name: "Download Files for Calibre"
      minute: "*/5"
      job: "/home/{{ cloud_sources.rclone_user }}/bin/calibre_import.sh > /var/log/calibre 2>&1"
      user: "{{  cloud_sources.rclone_user }}"
    tags: calibre
  - name: Image Sync Script
    ansible.builtin.template:
      src: templates/image_sync.sh.j2
      dest: "/home/{{ cloud_sources.rclone_user }}/bin/image_sync.sh"
      owner: "{{  cloud_sources.rclone_user }}"
      group: "{{  cloud_sources.rclone_user }}"
      mode : 0775
    tags: imagesync
  - name: Image Sync log files
    ansible.builtin.file:
      path: "/var/log/imagesync"
      state: touch
      owner: "{{  cloud_sources.rclone_user }}"
      group: "{{  cloud_sources.rclone_user }}"
      modification_time: preserve
      access_time: preserve
      mode: 0664
    tags: imagesync
  - name: Image Sync Cron
    ansible.builtin.cron:
      name: "Image Sync"
      minute: "15"
      hour: "5"
      job: "/home/{{ cloud_sources.rclone_user }}/bin/image_sync.sh > /var/log/imagesync 2>&1"
      user: "{{  cloud_sources.rclone_user }}"
    tags: imagesync
  - name: Add an Apt signing key, uses whichever key is at the URL
    ansible.builtin.apt_key:
      url: https://apt.grafana.com/gpg.key
      state: present
      keyring: /etc/apt/trusted.gpg.d/grafana.gpg
    tags: logging
  - name: Add Grafana Repository
    ansible.builtin.apt_repository:
      repo: deb [signed-by=/etc/apt/trusted.gpg.d/grafana.gpg] https://apt.grafana.com stable main
      state: present
    tags: logging
  - name: Install promtail
    apt:
      name: promtail
      state: present
      update_cache: yes
    tags: logging
  - name: Setup Promtail Config
    ansible.builtin.template:
      src: templates/promtail-config.yml.j2
      dest: "/etc/promtail/config.yml"
    tags: logging
    notify: Restart Promtail
  # GPU Support
  - name: Add nVidia Apt signing key
    ansible.builtin.apt_key:
      url: https://nvidia.github.io/libnvidia-container/gpgkey
      state: present
      keyring: /etc/apt/trusted.gpg.d/nvidia.gpg
    tags: gpu
  - name: Add nVidia Repository
    ansible.builtin.apt_repository:
      repo: deb [signed-by=/etc/apt/trusted.gpg.d/nvidia.gpg] https://nvidia.github.io/libnvidia-container/stable/deb/$(ARCH) /
      state: present
    tags: gpu
  - name: Install nVidia Container Toolkit
    apt:
      name: nvidia-container-toolkit
      state: present
      update_cache: yes
    tags: gpu
  # Then run the following 2 commands:
  # * sudo nvidia-ctk runtime configure --runtime=docker
  # * sudo systemctl restart docker
  # From: https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html

  # Ansible
  - name: Install Software Properties
    apt:
      pkg:
      - software-properties-common
    tags: ansible
  - name: Add Ansible Repository
    ansible.builtin.apt_repository:
      repo: ppa:ansible/ansible
      state: present
    tags: ansible
  - name: Install Ansible
    apt:
      pkg:
      - ansible
    tags: ansible

  handlers:
  - name: Restart Promtail
    service:
      name=promtail
      state=restarted
  - name: Restart cron
    service:
      name: cron
      state: restarted