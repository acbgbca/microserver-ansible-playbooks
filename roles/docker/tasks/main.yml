---
- name: Check if GPG key exists
  stat:
    path: /etc/apt/keyrings/docker.asc
  register: result
- name: add GPG key
  get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: 644
  when: not result.stat.exists
- name: add docker repository to apt
  apt_repository:
    filename: docker
    repo: deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu noble stable
    state: present
- name: Install docker
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
- name: Ensure Docker is started
  service:
    name: docker
    state: started
    enabled: yes
- name: Install Plugins
  community.docker.docker_plugin:
    plugin_name: "{{ item.plugin }}"
    alias: "{{ item.name }}"
    state: present
  with_items: "{{ docker_plugins }}"
  when: docker_plugins is defined
- name: Enable Plugins
  community.docker.docker_plugin:
    plugin_name: grafana/loki-docker-driver:latest
    alias: loki
    state: enable
  with_items: "{{ docker_plugins }}"
  when: docker_plugins is defined
- name: Docker Bridge Networks
  docker_network:
    driver: bridge
    name: "{{ item }}"
  with_items: "{{ docker_networks_bridge }}"
  when: docker_networks_bridge is defined
- name: Docker NFS Networks
  docker_volume:
    driver: "local"
    driver_options:
      type: nfs
      o: "addr={{ item.host }},{{ item.access }}"
      device: "{{ item.device }}"
    volume_name: "{{ item.name }}"
  with_items: "{{ docker_networks_nfs }}"
  when: docker_networks_nfs is defined
- name: Docker macvlan Networks
  docker_network:
    name: "{{ item.name }}"
    driver: "macvlan"
    driver_options:
      parent: "{{ item.parent_network }}"
    ipam_config:
      - subnet: "{{ item.subnet | default('192.168.0.0/24') }}"
        gateway: "{{ item.gateway | default('192.168.0.1') }}"
        iprange: "{{ item.iprange }}"
  with_items: "{{ docker_networks_macvlan }}"
  when: docker_networks_macvlan is defined
- name: Add users to docker group
  user:
    name: "{{ item }}"
    state: present
    append: yes
    groups:
      - docker
  with_items: "{{ docker_users }}"
  when: docker_users is defined
- name: Setup Docker Daemon Config
  ansible.builtin.template:
    src: "{{ docker_daemon_config }}"
    dest: /etc/docker/daemon.json
    mode: '0644'
  when: docker_daemon_config is defined
  notify: restart docker